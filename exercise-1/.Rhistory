n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n + 1)
m <- seq(10, 1)
print(m)
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- (sin_wave * cos_wave) + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
words <- c("fun", "grass", "music", "blanket", "puppy", "laptop")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste(words, "is the word of the day!")
print(words_of_the_day)
words <- c("fun", "grass", "music", "blanket", "puppy", "laptop")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste(words, "is the word of the day!")
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words <= "f"
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- g <= words <= m
# Exercise 3: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("fun", "grass", "music", "blanket", "puppy", "laptop")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste(words, "is the word of the day!")
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words <= "f"
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words <= "m" && words >= "g"
# Define a function `word_bin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
word_bin <- function(word_input, letter_1, letter_2) {
result <- word_input <= letter_2 && word_input >= letter_1
return(result)
}
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
print(word_bin(words, e, q))
# Exercise 3: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("fun", "grass", "music", "blanket", "puppy", "laptop")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste(words, "is the word of the day!")
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words <= "f"
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words <= "m" && words >= "g"
# Define a function `word_bin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
word_bin <- function(word_input, letter_1, letter_2) {
result <- word_input <= letter_2 && word_input >= letter_1
return(result)
}
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
print(word_bin(words, "e", "q"))
# Exercise 3: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("fun", "grass", "music", "blanket", "puppy", "laptop")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste0("'", words, "' is the word of the day!")
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
first_letter <- function(input) {
substring(input, 1, 1)
}
a_f_words <- words[first_letter(words) <= "f"]
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[first_letter(words) >= "g" & first_letter(words) <= "m"]
# Define a function `word_bin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
word_bin <- function(word_input, letter_1, letter_2) {
result <- word_input[first_letter(words) >= letter_1 & first_letter(words) <= letter_2]
return(result)
}
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
print(word_bin(words, "e", "q"))
